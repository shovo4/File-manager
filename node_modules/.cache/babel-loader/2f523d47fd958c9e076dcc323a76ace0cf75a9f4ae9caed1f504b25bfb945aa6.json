{"ast":null,"code":"var _jsxFileName = \"/Users/shovo/Downloads/mini/my-file-browser/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [fileSystem, setFileSystem] = useState({});\n  const [newItemName, setNewItemName] = useState('');\n  const [isFolder, setIsFolder] = useState(false);\n  const createFileOrFolder = () => {\n    const newFileSystem = {\n      ...fileSystem\n    };\n    if (isFolder) {\n      if (newFileSystem[newItemName]) {\n        alert('Folder already exists!');\n        return;\n      }\n      newFileSystem[newItemName] = {}; // Create a new folder\n    } else {\n      if (newFileSystem[newItemName]) {\n        alert('File already exists!');\n        return;\n      }\n\n      // Create a file with initial content based on the file extension\n      const extension = newItemName.split('.').pop();\n      switch (extension) {\n        case 'txt':\n        case 'js':\n        case 'ts':\n        case 'json':\n          newFileSystem[newItemName] = 'test'; // Example initial content\n          break;\n        default:\n          newFileSystem[newItemName] = '';\n        // Empty content for other file types\n      }\n    }\n\n    setFileSystem(newFileSystem);\n    setNewItemName(''); // Reset the input field\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter file/folder name\",\n      value: newItemName,\n      onChange: e => setNewItemName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsFolder(false);\n        createFileOrFolder();\n      },\n      children: \"Create File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsFolder(true);\n        createFileOrFolder();\n      },\n      children: \"Create Folder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"File System:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.keys(fileSystem).map(key => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [key, \" \", typeof fileSystem[key] === 'object' ? '(Folder)' : '(File)']\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8fcBvhmsna1FLloMiEwA2zh+Pb4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","fileSystem","setFileSystem","newItemName","setNewItemName","isFolder","setIsFolder","createFileOrFolder","newFileSystem","alert","extension","split","pop","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","marginTop","Object","keys","map","key","_c","$RefreshReg$"],"sources":["/Users/shovo/Downloads/mini/my-file-browser/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [fileSystem, setFileSystem] = useState({});\n  const [newItemName, setNewItemName] = useState('');\n  const [isFolder, setIsFolder] = useState(false);\n\n  const createFileOrFolder = () => {\n    const newFileSystem = { ...fileSystem };\n\n    if (isFolder) {\n      if (newFileSystem[newItemName]) {\n        alert('Folder already exists!');\n        return;\n      }\n      newFileSystem[newItemName] = {}; // Create a new folder\n    } else {\n      if (newFileSystem[newItemName]) {\n        alert('File already exists!');\n        return;\n      }\n\n      // Create a file with initial content based on the file extension\n      const extension = newItemName.split('.').pop();\n      switch (extension) {\n        case 'txt':\n        case 'js':\n        case 'ts':\n        case 'json':\n          newFileSystem[newItemName] = 'test'; // Example initial content\n          break;\n        default:\n          newFileSystem[newItemName] = ''; // Empty content for other file types\n      }\n    }\n\n    setFileSystem(newFileSystem);\n    setNewItemName(''); // Reset the input field\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Enter file/folder name\"\n        value={newItemName}\n        onChange={(e) => setNewItemName(e.target.value)}\n      />\n      <button onClick={() => { setIsFolder(false); createFileOrFolder(); }}>Create File</button>\n      <button onClick={() => { setIsFolder(true); createFileOrFolder(); }}>Create Folder</button>\n\n      <div style={{ marginTop: '20px' }}>\n        <strong>File System:</strong>\n        <ul>\n          {Object.keys(fileSystem).map(key => (\n            <li key={key}>{key} {typeof fileSystem[key] === 'object' ? '(Folder)' : '(File)'}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}